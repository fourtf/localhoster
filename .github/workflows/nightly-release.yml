name: Create Release
on: [push]
jobs:
  build:
    name: Create Release
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Get dependencies
      run: |
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi

    - name: Build
      run: |
        echo --- LINUX BUILD ---
        go build -v -o ./localhoster .
        zip linux.zip localhoster ./licenses/*
        rm localhoster
        
        echo --- WINDOWS BUILD ---
        GOOS=windows GOARCH=386 go build -v -o localhoster.exe
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: nightly
        release_name: nightly
        
    - name: Upload Linux Asset
      id: upload-linux-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./linux.zip
        asset_name: linux.zip
        asset_content_type: application/zip
        
    - name: Upload Windows Asset
      id: upload-windows-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./localhoster.exe
        asset_name: localhoster.exe
        asset_content_type: application/octet-stream
