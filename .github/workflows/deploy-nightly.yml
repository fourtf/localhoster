name: Deploy Nightly
on: [push]
jobs:
  build:
    name: Deploy Nightly
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.13
      uses: actions/setup-go@v1
      with:
        go-version: 1.13
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Get dependencies
      run: |
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi

    - name: Build
      run: |
        echo --- LINUX BUILD ---
        go build -v -o ./localhoster .
        zip linux.zip localhoster ./licenses/*
        
        echo --- WINDOWS BUILD ---
        GOOS=windows GOARCH=386 go build -v -o localhoster.exe
        zip windows.zip localhoster.exe ./licenses/*
    
    - name: Deploy Windows
      uses: WebFreak001/deploy-nightly@v1.0.1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          upload_url: https://uploads.github.com/repos/fourtf/localhoster/releases/23893083/assets{?name,label} # find out this value by opening https://api.github.com/repos/<owner>/<repo>/releases in your browser and copy the full "upload_url" value including the {?name,label} part
          release_id: 23893083 # same as above (id can just be taken out the upload_url, it's used to find old releases)
          asset_path: ./windows.zip # path to archive to upload
          asset_name: localhoster-windows-nightly-$$.zip # name to upload the release as, use $$ to insert date (YYYYMMDD) and 6 letter commit hash
          asset_content_type: application/zip # required by GitHub API
          max_releases: 1

    - name: Deploy Linux
      uses: WebFreak001/deploy-nightly@v1.0.1
      env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
          upload_url: https://uploads.github.com/repos/fourtf/localhoster/releases/23893083/assets{?name,label} # find out this value by opening https://api.github.com/repos/<owner>/<repo>/releases in your browser and copy the full "upload_url" value including the {?name,label} part
          release_id: 23893083 # same as above (id can just be taken out the upload_url, it's used to find old releases)
          asset_path: ./linux.zip # path to archive to upload
          asset_name: localhoster-linux-nightly-$$.zip # name to upload the release as, use $$ to insert date (YYYYMMDD) and 6 letter commit hash
          asset_content_type: application/zip # required by GitHub API
          max_releases: 1
